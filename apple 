# File: packages/apps/NRModeSwitcher/ml/train_mode_predictor.py
import numpy as np
import tensorflow as tf
from sklearn.model_selection import train_test_split

# Simulate real-world data collection for Android and Apple devices
np.random.seed(42)
rsrp = np.random.randint(-125, -70, 1000)  # realistic RSRP
battery = np.random.randint(10, 101, 1000)  # battery %
source = np.random.choice(["android", "apple"], size=1000, p=[0.6, 0.4])  # 60% Android, 40% Apple

# Define behavior: low RSRP and low battery prefer NSA, high RSRP and battery prefer DUAL
labels = []
for r, b, s in zip(rsrp, battery, source):
    if s == "android":
        if r < -110 and b < 30:
            labels.append(0)  # NSA
        elif -110 <= r <= -90:
            labels.append(1)  # SA
        else:
            labels.append(2)  # DUAL
    else:  # Apple
        if r < -105 and b < 40:
            labels.append(0)  # NSA
        elif -105 <= r <= -85:
            labels.append(1)  # SA
        else:
            labels.append(2)  # DUAL

# One-hot encode device type
device_type = np.array([[1, 0] if s == "android" else [0, 1] for s in source])

X_features = np.column_stack(((rsrp + 125) / 55, battery / 100))  # normalize to [0, 1]
X = np.hstack((X_features, device_type))
y = np.array(labels)

# Split dataset
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Build model
model = tf.keras.Sequential([
    tf.keras.layers.Dense(16, activation='relu', input_shape=(4,)),
    tf.keras.layers.Dense(12, activation='relu'),
    tf.keras.layers.Dense(3, activation='softmax')
])

model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])
model.fit(X_train, y_train, epochs=60, batch_size=32, validation_data=(X_test, y_test), verbose=2)

# Save as TFLite
converter = tf.lite.TFLiteConverter.from_keras_model(model)
tflite_model = converter.convert()

with open("mode_predictor.tflite", "wb") as f:
    f.write(tflite_model)

print("✅ Retrained mode_predictor.tflite with Android + Apple support")


✅ The model now supports both Android and Apple devices by:

Including device type in the input features.

Adjusting behavior rules per platform.

One-hot encoding the source type ([1, 0] = Android, [0, 1] = Apple).

Expanding the model to handle 4 input features.
